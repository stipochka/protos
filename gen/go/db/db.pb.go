// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: db/db.proto

package database

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAllRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Req           string                 `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllRecordsRequest) Reset() {
	*x = GetAllRecordsRequest{}
	mi := &file_db_db_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRecordsRequest) ProtoMessage() {}

func (x *GetAllRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_db_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetAllRecordsRequest) Descriptor() ([]byte, []int) {
	return file_db_db_proto_rawDescGZIP(), []int{0}
}

func (x *GetAllRecordsRequest) GetReq() string {
	if x != nil {
		return x.Req
	}
	return ""
}

type GetByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordID      int64                  `protobuf:"varint,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByIdRequest) Reset() {
	*x = GetByIdRequest{}
	mi := &file_db_db_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdRequest) ProtoMessage() {}

func (x *GetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_db_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdRequest.ProtoReflect.Descriptor instead.
func (*GetByIdRequest) Descriptor() ([]byte, []int) {
	return file_db_db_proto_rawDescGZIP(), []int{1}
}

func (x *GetByIdRequest) GetRecordID() int64 {
	if x != nil {
		return x.RecordID
	}
	return 0
}

type RecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // ON, OFF
	PollingPeriod int32                  `protobuf:"varint,3,opt,name=polling_period,json=pollingPeriod,proto3" json:"polling_period,omitempty"`
	Temperature   int32                  `protobuf:"varint,4,opt,name=temperature,proto3" json:"temperature,omitempty"`                // real value = Temperature / 100
	LampStatus    string                 `protobuf:"bytes,5,opt,name=lamp_status,json=lampStatus,proto3" json:"lamp_status,omitempty"` // ON, OFF
	Voltage       int32                  `protobuf:"varint,6,opt,name=voltage,proto3" json:"voltage,omitempty"`                        // same reason as Temperature
	Thresholds    *Thresholds            `protobuf:"bytes,7,opt,name=thresholds,proto3" json:"thresholds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordResponse) Reset() {
	*x = RecordResponse{}
	mi := &file_db_db_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordResponse) ProtoMessage() {}

func (x *RecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_db_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordResponse.ProtoReflect.Descriptor instead.
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return file_db_db_proto_rawDescGZIP(), []int{2}
}

func (x *RecordResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecordResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RecordResponse) GetPollingPeriod() int32 {
	if x != nil {
		return x.PollingPeriod
	}
	return 0
}

func (x *RecordResponse) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *RecordResponse) GetLampStatus() string {
	if x != nil {
		return x.LampStatus
	}
	return ""
}

func (x *RecordResponse) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *RecordResponse) GetThresholds() *Thresholds {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

type Thresholds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Temperature   []*SensorData          `protobuf:"bytes,1,rep,name=temperature,proto3" json:"temperature,omitempty"`
	Humidity      []*SensorData          `protobuf:"bytes,2,rep,name=humidity,proto3" json:"humidity,omitempty"`
	Voltage       []*SensorData          `protobuf:"bytes,3,rep,name=voltage,proto3" json:"voltage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Thresholds) Reset() {
	*x = Thresholds{}
	mi := &file_db_db_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thresholds) ProtoMessage() {}

func (x *Thresholds) ProtoReflect() protoreflect.Message {
	mi := &file_db_db_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thresholds.ProtoReflect.Descriptor instead.
func (*Thresholds) Descriptor() ([]byte, []int) {
	return file_db_db_proto_rawDescGZIP(), []int{3}
}

func (x *Thresholds) GetTemperature() []*SensorData {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *Thresholds) GetHumidity() []*SensorData {
	if x != nil {
		return x.Humidity
	}
	return nil
}

func (x *Thresholds) GetVoltage() []*SensorData {
	if x != nil {
		return x.Voltage
	}
	return nil
}

type SensorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"` // same reason as Temperature in Record struct
	PollingPeriod int32                  `protobuf:"varint,2,opt,name=polling_period,json=pollingPeriod,proto3" json:"polling_period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	mi := &file_db_db_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_db_db_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_db_db_proto_rawDescGZIP(), []int{4}
}

func (x *SensorData) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SensorData) GetPollingPeriod() int32 {
	if x != nil {
		return x.PollingPeriod
	}
	return 0
}

type RecordsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*RecordResponse      `protobuf:"bytes,1,rep,name=Records,proto3" json:"Records,omitempty"` //list of records of mcu from db
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordsResponse) Reset() {
	*x = RecordsResponse{}
	mi := &file_db_db_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordsResponse) ProtoMessage() {}

func (x *RecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_db_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordsResponse.ProtoReflect.Descriptor instead.
func (*RecordsResponse) Descriptor() ([]byte, []int) {
	return file_db_db_proto_rawDescGZIP(), []int{5}
}

func (x *RecordsResponse) GetRecords() []*RecordResponse {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_db_db_proto protoreflect.FileDescriptor

var file_db_db_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x64, 0x62, 0x2f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x71, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x22,
	0xf2, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x6d, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x68,
	0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32,
	0x9b, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x18, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1c, 0x5a,
	0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x3b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_db_db_proto_rawDescOnce sync.Once
	file_db_db_proto_rawDescData []byte
)

func file_db_db_proto_rawDescGZIP() []byte {
	file_db_db_proto_rawDescOnce.Do(func() {
		file_db_db_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_db_db_proto_rawDesc), len(file_db_db_proto_rawDesc)))
	})
	return file_db_db_proto_rawDescData
}

var file_db_db_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_db_db_proto_goTypes = []any{
	(*GetAllRecordsRequest)(nil), // 0: database.GetAllRecordsRequest
	(*GetByIdRequest)(nil),       // 1: database.GetByIdRequest
	(*RecordResponse)(nil),       // 2: database.RecordResponse
	(*Thresholds)(nil),           // 3: database.Thresholds
	(*SensorData)(nil),           // 4: database.SensorData
	(*RecordsResponse)(nil),      // 5: database.RecordsResponse
}
var file_db_db_proto_depIdxs = []int32{
	3, // 0: database.RecordResponse.thresholds:type_name -> database.Thresholds
	4, // 1: database.Thresholds.temperature:type_name -> database.SensorData
	4, // 2: database.Thresholds.humidity:type_name -> database.SensorData
	4, // 3: database.Thresholds.voltage:type_name -> database.SensorData
	2, // 4: database.RecordsResponse.Records:type_name -> database.RecordResponse
	1, // 5: database.Database.GetRecordByID:input_type -> database.GetByIdRequest
	0, // 6: database.Database.GetAllRecords:input_type -> database.GetAllRecordsRequest
	2, // 7: database.Database.GetRecordByID:output_type -> database.RecordResponse
	5, // 8: database.Database.GetAllRecords:output_type -> database.RecordsResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_db_db_proto_init() }
func file_db_db_proto_init() {
	if File_db_db_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_db_db_proto_rawDesc), len(file_db_db_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_db_db_proto_goTypes,
		DependencyIndexes: file_db_db_proto_depIdxs,
		MessageInfos:      file_db_db_proto_msgTypes,
	}.Build()
	File_db_db_proto = out.File
	file_db_db_proto_goTypes = nil
	file_db_db_proto_depIdxs = nil
}
